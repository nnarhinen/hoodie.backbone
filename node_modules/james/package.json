{
  "name": "james",
  "version": "0.1.11",
  "description": "James is a composable build tool which prefers code over configuration.",
  "main": "index.js",
  "scripts": {
    "test": "jshint *.js **/*.js && mocha"
  },
  "repository": "",
  "keywords": [
    "grunt",
    "james",
    "build",
    "cake",
    "make",
    "watch",
    "toolchain"
  ],
  "author": {
    "name": "Jarno Keskikangas",
    "email": "jarno.keskikangas@leonidasoy.fi"
  },
  "license": "MIT",
  "dependencies": {
    "glob": "~3.1.21",
    "gaze": "~0.3.3",
    "mkdirp": "~0.3.5",
    "coffee-script": "~1.6.1",
    "q": "~0.9.1",
    "readable-stream": "~1.0.0",
    "colors": "~0.6.0-1",
    "underscore": "~1.4.4"
  },
  "bin": {
    "james": "bin/james"
  },
  "preferGlobal": true,
  "devDependencies": {
    "mocha": "~1.8.1",
    "jshint": "~1.1.0"
  },
  "readme": "# Synopsis\n\n[![Build Status](https://travis-ci.org/leonidas/james.js.png?branch=master)](https://travis-ci.org/leonidas/james.js)\n\nJames.js is a composable build tool which prefers code over configuration.\n\n```javascript\n// Jamesfile.js\nvar james  = require('james'),\n    coffee = require('james-coffee'),\n    uglify = require('james-uglify');\n\njames.task('build', function() {\n\n  james.list('src/**/*.coffee').forEach(function(file) {\n\n    james.read(file)\n      .transform(coffee({bare: true}))\n      .transform(uglify)\n      .write(file.replace('src', 'dist').replace('.coffee', '.min.js'));\n  });\n});\n\njames.task('watch', function() {\n  james.watch('test/**/*.coffee', function(event, file) {\n    james.read(file)\n      .transform(coffee({bare: true}))\n      .write(file.replace('.coffee', '.js')));\n  });\n});\n\njames.task('default', ['build', 'watch']);\n```\n\n## API\n\n`james.task(name, task)` Define a new task with given `name`. `task` can be either a callback or a list of existing task names.\n\n`james.list(glob1, glob2, ...)` List files matching to a given `glob`s.\n\n`james.watch(glob, callback)` Watch files matching the `glob`.\n\n`james.dest(filename)` Returns a [Writable stream](http://nodejs.org/api/stream.html#stream_class_stream_writable).\nHandy if you want to concatenate files to a single destination.\n\n`james.read(filename)` Read a file. Returns a `Pipeline` object. Use `Pipeline.stream`, if you need an access\nto the underlying ReadableStream.\n\n`james.wait(writes)` Waits for `Pipeline.write` operation to finish. `writes` can be a single write operation or a list of\nwrite operations, e.g.,\n\n```javascript\njs = james.list('src/**/*.coffee').map(function(file) {\n  james.read(file).transform(coffee).write(file.replace(/\\.coffee/, '.js'));\n});\n\n// After james.wait, it's safe to read files, e.g., with browserify or r.js\njames.wait(js, function(js) { js.forEach(function(filename){ james.read(filename).write(process.stdout) }) });\n```\n\n`Pipeline.transform(transformation)` Transform the underlying stream with a given `transformation`. `transformation` can be\neither a [Transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform) or a Transform stream constructor.\n\n`Pipeline.write(dest)` Write the underlying stream to a `dest`. `dest` can be either a\n[Writable stream](http://nodejs.org/api/stream.html#stream_class_stream_writable) or a filename. Returns the Writable stream\nwith `stream.promise` property. Promise is resolved when the file has been written. Promise is used by `james.wait`.\n\n## Command-line\n\nBy default, james runs `default` task. Specific tasks can be run by listing them on the command-line.\n\n```\n> npm install -g james\n> james\n> james build watch\n```\n\n## Transformations\n\nExisting transformations are listed in the [wiki](https://github.com/leonidas/james.js/wiki). Please add your transformations, too!\n\n### Creating new transformations\n\nJames uses node.js streams for transformations.\nCreate a [Transform stream](http://nodejs.org/api/stream.html#stream_class_stream_transform),\nor use `james.createTransformation` helper.\n\n```javascript\n// james-coffee/index.js\nvar james  = require('james'),\n    coffee = require('coffee-script');\n\ncoffee.createStream = function() {\n  return james.createTransformation(function(content, callback) {\n\n    // Process the file content and call the callback with the result.\n    callback(coffee.compile(content));\n  });\n};\n\njames.read('./hello.coffee')\n  .transform(coffee.createStream)\n  .write(process.stdout);\n```\n",
  "readmeFilename": "README.md",
  "_id": "james@0.1.11",
  "_from": "james@~0.1.11"
}
